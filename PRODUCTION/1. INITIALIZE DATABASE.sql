alter session set "_ORACLE_SCRIPT"=true;  
SET SERVEROUTPUT ON;
DECLARE
nCount NUMBER;
BEGIN
SELECT count(*) into nCount FROM user_tables where table_name = 'PEOPLE';
IF(nCount > 0)
THEN
    DBMS_OUTPUT.PUT_LINE('TABLE PEOPLE ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE PEOPLE(
      USER_ID       NUMBER GENERATED BY DEFAULT AS IDENTITY,
      USERNAME      VARCHAR(16) UNIQUE NOT NULL,
      EMAIL         VARCHAR(60) UNIQUE NOT NULL,
      PASS_WORD     VARCHAR(15) NOT NULL,
      DATE_JOINED   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FIRST_NAME    VARCHAR(45) NOT NULL,
      LAST_NAME     VARCHAR(45) NOT NULL,
      PHONE_NUMBER  NUMBER(10) NOT NULL,
      CHECK(REGEXP_LIKE(EMAIL,''^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$'')),
      CHECK(REGEXP_LIKE(USERNAME,''^[A-Za-z0-9]{1,16}$'')),
      CHECK(REGEXP_LIKE(PHONE_NUMBER,''^[0-9]{10}$'')),    
      PRIMARY KEY(USER_ID))';    

END IF;
SELECT count(*) into nCount FROM user_tables where table_name = 'LISTING_CATEGORY';
IF(nCount > 0)
THEN
    dbms_output.put_line('TABLE LISTING_CATEGORY ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE LISTING_CATEGORY(
      CATEGORY_ID       NUMBER GENERATED BY DEFAULT AS IDENTITY,
      CATEGORY_NAME     VARCHAR(255) UNIQUE NOT NULL,
      PRIMARY KEY(CATEGORY_ID)
    )';
    EXECUTE IMMEDIATE 'INSERT INTO LISTING_CATEGORY(CATEGORY_NAME) VALUES(''ELECTRONICS'')';
    EXECUTE IMMEDIATE 'INSERT INTO LISTING_CATEGORY(CATEGORY_NAME) VALUES(''CLOTHING'')';
    EXECUTE IMMEDIATE 'INSERT INTO LISTING_CATEGORY(CATEGORY_NAME) VALUES(''SPORTS'')';
    EXECUTE IMMEDIATE 'INSERT INTO LISTING_CATEGORY(CATEGORY_NAME) VALUES(''HOME'')';
    EXECUTE IMMEDIATE 'INSERT INTO LISTING_CATEGORY(CATEGORY_NAME) VALUES(''OTHERS'')';
    EXECUTE IMMEDIATE 'INSERT INTO LISTING_CATEGORY(CATEGORY_NAME) VALUES(''TRANSPORT'')';
    EXECUTE IMMEDIATE 'INSERT INTO LISTING_CATEGORY(CATEGORY_NAME) VALUES(''OUTDOOR'')';
    
END IF;
SELECT count(*) into nCount FROM user_tables where table_name = 'RENTAL_BASIS';
IF(nCount > 0)
THEN
    dbms_output.put_line('TABLE RENTAL_BASIS ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE RENTAL_BASIS(
      BASIS_ID       NUMBER GENERATED BY DEFAULT AS IDENTITY,
      BASIS_NAME     VARCHAR(45) UNIQUE NOT NULL,
      PRIMARY KEY(BASIS_ID)
    )';
     EXECUTE IMMEDIATE 'INSERT INTO RENTAL_BASIS(BASIS_NAME) VALUES(''PER HOUR'')';
     EXECUTE IMMEDIATE 'INSERT INTO RENTAL_BASIS(BASIS_NAME) VALUES(''PER DAY'')';
     EXECUTE IMMEDIATE 'INSERT INTO RENTAL_BASIS(BASIS_NAME) VALUES(''PER WEEK'')';
     EXECUTE IMMEDIATE 'INSERT INTO RENTAL_BASIS(BASIS_NAME) VALUES(''PER MONTH'')';
     
END IF;
SELECT count(*) into nCount FROM user_tables where table_name = 'ADDRESS_COUNTRY';
IF(nCount > 0)
THEN
    dbms_output.put_line('TABLE ADDRESS_COUNTRY ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE ADDRESS_COUNTRY(
      COUNTRY_ID       NUMBER GENERATED BY DEFAULT AS IDENTITY,
      COUNTRY_NAME     VARCHAR(60) UNIQUE NOT NULL,
      PRIMARY KEY(COUNTRY_ID)
    )';
    EXECUTE IMMEDIATE 'INSERT INTO ADDRESS_COUNTRY(COUNTRY_NAME) VALUES(''UNITED STATES'')';
    
END IF;
SELECT count(*) into nCount FROM user_tables where table_name = 'ADDRESS_STATE';
IF(nCount > 0)
THEN
    dbms_output.put_line('TABLE ADDRESS_STATE ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE ADDRESS_STATE(
      STATE_ID       NUMBER GENERATED BY DEFAULT AS IDENTITY,
      STATE_NAME     VARCHAR(60) UNIQUE NOT NULL,
      COUNTRY_ID    REFERENCES ADDRESS_COUNTRY(COUNTRY_ID) ON DELETE CASCADE,
      PRIMARY KEY(STATE_ID)
    )';
    EXECUTE IMMEDIATE 'INSERT INTO ADDRESS_STATE(STATE_NAME,COUNTRY_ID) VALUES(''MASSACHUSETTS'',1)';
    EXECUTE IMMEDIATE 'INSERT INTO ADDRESS_STATE(STATE_NAME,COUNTRY_ID) VALUES(''NEW YORK'',1)';
    EXECUTE IMMEDIATE 'INSERT INTO ADDRESS_STATE(STATE_NAME,COUNTRY_ID) VALUES(''CALIFORNIA'',1)';
    EXECUTE IMMEDIATE 'INSERT INTO ADDRESS_STATE(STATE_NAME,COUNTRY_ID) VALUES(''VIRGINIA'',1)';
    
END IF;
SELECT count(*) into nCount FROM user_tables where table_name = 'ADDRESS_CITY';
IF(nCount > 0)
THEN
    dbms_output.put_line('TABLE ADDRESS_CITY ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE ADDRESS_CITY(
      CITY_ID       NUMBER GENERATED BY DEFAULT AS IDENTITY,
      CITY_NAME     VARCHAR(60) UNIQUE NOT NULL,
      STATE_ID      REFERENCES ADDRESS_STATE(STATE_ID) ON DELETE CASCADE,
      PRIMARY KEY(CITY_ID)
    )';
    EXECUTE IMMEDIATE 'INSERT INTO ADDRESS_CITY(CITY_NAME,STATE_ID) VALUES(''NEW YORK CITY'',(SELECT STATE_ID FROM ADDRESS_STATE WHERE STATE_NAME=''NEW YORK''))';
    EXECUTE IMMEDIATE 'INSERT INTO ADDRESS_CITY(CITY_NAME,STATE_ID) VALUES(''BUFFALO'',(SELECT STATE_ID FROM ADDRESS_STATE WHERE STATE_NAME=''NEW YORK''))';
    EXECUTE IMMEDIATE 'INSERT INTO ADDRESS_CITY(CITY_NAME,STATE_ID) VALUES(''ROCHESTER'',(SELECT STATE_ID FROM ADDRESS_STATE WHERE STATE_NAME=''NEW YORK''))';
    EXECUTE IMMEDIATE 'INSERT INTO ADDRESS_CITY(CITY_NAME,STATE_ID) VALUES(''FAIRFAX'',(SELECT STATE_ID FROM ADDRESS_STATE WHERE STATE_NAME=''VIRGINIA''))';
    EXECUTE IMMEDIATE 'INSERT INTO ADDRESS_CITY(CITY_NAME,STATE_ID) VALUES(''BRISTOL'',(SELECT STATE_ID FROM ADDRESS_STATE WHERE STATE_NAME=''VIRGINIA''))';
    EXECUTE IMMEDIATE 'INSERT INTO ADDRESS_CITY(CITY_NAME,STATE_ID) VALUES(''SAN JOSE'',(SELECT STATE_ID FROM ADDRESS_STATE WHERE STATE_NAME=''CALIFORNIA''))';
    EXECUTE IMMEDIATE 'INSERT INTO ADDRESS_CITY(CITY_NAME,STATE_ID) VALUES(''SANTA CLARA'',(SELECT STATE_ID FROM ADDRESS_STATE WHERE STATE_NAME=''CALIFORNIA''))';
    EXECUTE IMMEDIATE 'INSERT INTO ADDRESS_CITY(CITY_NAME,STATE_ID) VALUES(''SAN FRANSISCO'',(SELECT STATE_ID FROM ADDRESS_STATE WHERE STATE_NAME=''CALIFORNIA''))';
    EXECUTE IMMEDIATE 'INSERT INTO ADDRESS_CITY(CITY_NAME,STATE_ID) VALUES(''LOS ANGELES'',(SELECT STATE_ID FROM ADDRESS_STATE WHERE STATE_NAME=''CALIFORNIA''))';
    EXECUTE IMMEDIATE 'INSERT INTO ADDRESS_CITY(CITY_NAME,STATE_ID) VALUES(''BOSTON'',(SELECT STATE_ID FROM ADDRESS_STATE WHERE STATE_NAME=''MASSACHUSETTS''))';
    EXECUTE IMMEDIATE 'INSERT INTO ADDRESS_CITY(CITY_NAME,STATE_ID) VALUES(''CAMBRIDGE'',(SELECT STATE_ID FROM ADDRESS_STATE WHERE STATE_NAME=''MASSACHUSETTS''))';
    
END IF;
SELECT count(*) into nCount FROM user_tables where table_name = 'USER_ADDRESS';
IF(nCount > 0)
THEN
    dbms_output.put_line('TABLE USER_ADDRESS ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE USER_ADDRESS(
  ADDRESS_ID         NUMBER GENERATED BY DEFAULT AS IDENTITY,
  ADDRESS_LINE_1     VARCHAR(255) NOT NULL,
  ADDRESS_LINE_2     VARCHAR(255) NOT NULL,
  ZIP_CODE           NUMBER NOT NULL, 
  USER_ID            REFERENCES PEOPLE(USER_ID) ON DELETE CASCADE,
  CITY_ID            REFERENCES ADDRESS_CITY(CITY_ID) ON DELETE CASCADE,
  PRIMARY KEY(ADDRESS_ID)
)';
    
END IF;
SELECT count(*) into nCount FROM user_tables where table_name = 'LISTINGS';
IF(nCount > 0)
THEN
    dbms_output.put_line('TABLE LISTINGS ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE LISTINGS(
  LISTING_ID        NUMBER GENERATED BY DEFAULT AS IDENTITY,
  TITLE             VARCHAR(32) NOT NULL,
  L_DESCRIPTION     VARCHAR(255) NOT NULL,
  DATE_POSTED       TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP,
  CONTACT_DETAILS   VARCHAR(45) NOT NULL,
  PRICE             NUMBER NOT NULL,
  RENTAL_BASIS_ID   REFERENCES RENTAL_BASIS(BASIS_ID) ON DELETE CASCADE,
  CATEGORY_ID       REFERENCES LISTING_CATEGORY(CATEGORY_ID) ON DELETE CASCADE,
  USER_ID           REFERENCES PEOPLE(USER_ID) ON DELETE CASCADE,
  ADDRESS_ID        REFERENCES USER_ADDRESS(ADDRESS_ID) ON DELETE CASCADE,
  START_DATE        TIMESTAMP(0),
  END_DATE          TIMESTAMP(0),
  PRIMARY KEY(LISTING_ID)
    )';
    
END IF;
SELECT count(*) into nCount FROM user_tables where table_name = 'CURRENT_STATUS';
IF(nCount > 0)
THEN
    dbms_output.put_line('TABLE CURRENT_STATUS ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE CURRENT_STATUS(
  STATUS_ID            NUMBER GENERATED BY DEFAULT AS IDENTITY,
  STATUS        VARCHAR(255) NOT NULL,
  PRIMARY KEY(STATUS_ID)
)';
  EXECUTE IMMEDIATE 'INSERT INTO CURRENT_STATUS(STATUS) VALUES(''PENDING EMPLOYEE ASSIGNMENT'')';  
  EXECUTE IMMEDIATE 'INSERT INTO CURRENT_STATUS(STATUS) VALUES(''DELIVERY IN-TRANSIT'')';  
  EXECUTE IMMEDIATE 'INSERT INTO CURRENT_STATUS(STATUS) VALUES(''DELIVERED'')';  
  EXECUTE IMMEDIATE 'INSERT INTO CURRENT_STATUS(STATUS) VALUES(''PICKUP IN-TRANSIT'')';  
  EXECUTE IMMEDIATE 'INSERT INTO CURRENT_STATUS(STATUS) VALUES(''ORDER COMPLETE'')';  
  EXECUTE IMMEDIATE 'INSERT INTO CURRENT_STATUS(STATUS) VALUES(''DISPUTED'')';    

END IF;
SELECT count(*) into nCount FROM user_tables where table_name = 'DEAL_STATUS';
IF(nCount > 0)
THEN
    dbms_output.put_line('TABLE DEAL_STATUS ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE DEAL_STATUS(
  STATUS_ID         NUMBER GENERATED BY DEFAULT AS IDENTITY,
  STATUS_NAME       VARCHAR(45) NOT NULL,
  PRIMARY KEY(STATUS_ID))';
    EXECUTE IMMEDIATE 'INSERT INTO DEAL_STATUS(STATUS_NAME) VALUES(''PENDING'')'; 
    EXECUTE IMMEDIATE 'INSERT INTO DEAL_STATUS(STATUS_NAME) VALUES(''APPROVED'')'; 
    EXECUTE IMMEDIATE 'INSERT INTO DEAL_STATUS(STATUS_NAME) VALUES(''REJECTED'')'; 
    
END IF;
SELECT count(*) into nCount FROM user_tables where table_name = 'DESIGNATION';
IF(nCount > 0)
THEN
    dbms_output.put_line('TABLE DESIGNATION ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE DESIGNATION(
  DESIGNATION_ID    NUMBER GENERATED BY DEFAULT AS IDENTITY,
  DESIGNATION       VARCHAR(45) NOT NULL,
  PRIMARY KEY(DESIGNATION_ID)
)';
    EXECUTE IMMEDIATE 'INSERT INTO DESIGNATION(DESIGNATION) VALUES(''MANAGER'')';  
    EXECUTE IMMEDIATE 'INSERT INTO DESIGNATION(DESIGNATION) VALUES(''DELIVERY EXECUTIVE'')';  
    
END IF;
SELECT count(*) into nCount FROM user_tables where table_name = 'DEALS';
IF(nCount > 0)
THEN
    dbms_output.put_line('TABLE DEALS ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE DEALS(
  DEALS_ID          NUMBER GENERATED BY DEFAULT AS IDENTITY,
  PRICE             NUMBER NOT NULL,
  STATUS_ID         REFERENCES DEAL_STATUS(STATUS_ID) ON DELETE CASCADE,
  LISTING_ID        REFERENCES LISTINGS(LISTING_ID) ON DELETE CASCADE,
  USER_ID           REFERENCES PEOPLE(USER_ID) ON DELETE CASCADE,
  CREATE_TIME       TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP,
  START_DATE        TIMESTAMP(0),
  END_DATE          TIMESTAMP(0),
  PRIMARY KEY(DEALS_ID)
)';

END IF;
SELECT count(*) into nCount FROM user_tables where table_name = 'EMPLOYEE';
IF(nCount > 0)
THEN
    dbms_output.put_line('TABLE EMPLOYEE ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE EMPLOYEE(
  EMPLOYEE_ID       NUMBER GENERATED BY DEFAULT AS IDENTITY,
  PAY               NUMBER NOT NULL,
  EMAIL             VARCHAR(60) UNIQUE NOT NULL,
  PASS_WORD         VARCHAR(15) NOT NULL,
  DATE_JOINED       TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FIRST_NAME        VARCHAR(45) NOT NULL,
  LAST_NAME         VARCHAR(45) NOT NULL,
  PHONE_NUMBER      NUMBER(10) NOT NULL,
  DESIGNATION_ID    REFERENCES DESIGNATION(DESIGNATION_ID) ON DELETE CASCADE,
  CHECK(REGEXP_LIKE(EMAIL,''^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$'')),
  CHECK(REGEXP_LIKE(PHONE_NUMBER,''^[0-9]{10}$'')),
          
  PRIMARY KEY(EMPLOYEE_ID))';
    EXECUTE IMMEDIATE 'INSERT INTO EMPLOYEE(PAY, EMAIL,PASS_WORD, FIRST_NAME, LAST_NAME, PHONE_NUMBER, DESIGNATION_ID) VALUES(500,''EMAILJohn@GMAIL.com'',''PASSJohn'',''John'',''Newman'',6177598073,((SELECT DESIGNATION_ID FROM DESIGNATION WHERE DESIGNATION=''DELIVERY EXECUTIVE'')))';
    EXECUTE IMMEDIATE 'INSERT INTO EMPLOYEE(PAY, EMAIL,PASS_WORD, FIRST_NAME, LAST_NAME, PHONE_NUMBER,  DESIGNATION_ID) VALUES(450,''EMAILDavid@GMAIL.com'',''PASSDavid'',''David'',''Leterman'',8888598073,((SELECT DESIGNATION_ID FROM DESIGNATION WHERE DESIGNATION=''DELIVERY EXECUTIVE'')))';
    EXECUTE IMMEDIATE 'INSERT INTO EMPLOYEE(PAY, EMAIL,PASS_WORD, FIRST_NAME, LAST_NAME, PHONE_NUMBER,  DESIGNATION_ID) VALUES(500,''EMAILRandy@GMAIL.com'',''PASSRandy'',''Randy'',''Ortan'',6999999073,((SELECT DESIGNATION_ID FROM DESIGNATION WHERE DESIGNATION=''DELIVERY EXECUTIVE'')))';
    EXECUTE IMMEDIATE 'INSERT INTO EMPLOYEE(PAY, EMAIL,PASS_WORD, FIRST_NAME, LAST_NAME, PHONE_NUMBER,  DESIGNATION_ID) VALUES(600,''EMAILKendrick@GMAIL.com'',''PASSKendrick'',''Kendrick'',''Lemar'',6177555555,((SELECT DESIGNATION_ID FROM DESIGNATION WHERE DESIGNATION=''DELIVERY EXECUTIVE'')))';
    EXECUTE IMMEDIATE 'INSERT INTO EMPLOYEE(PAY, EMAIL,PASS_WORD, FIRST_NAME, LAST_NAME, PHONE_NUMBER,  DESIGNATION_ID) VALUES(500,''EMAILGal@GMAIL.com'',''PASSGal'',''Gal'',''Gadot'',9877598073,((SELECT DESIGNATION_ID FROM DESIGNATION WHERE DESIGNATION=''DELIVERY EXECUTIVE'')))';
    EXECUTE IMMEDIATE 'INSERT INTO EMPLOYEE(PAY, EMAIL,PASS_WORD, FIRST_NAME, LAST_NAME, PHONE_NUMBER,  DESIGNATION_ID) VALUES(2000,''EMAILEmily@GMAIL.COM'',''PASSEmily'',''Emily'',''Blunt'',4977598073,((SELECT DESIGNATION_ID FROM DESIGNATION WHERE DESIGNATION=''MANAGER'')))';
END IF;
SELECT count(*) into nCount FROM user_tables where table_name = 'EMPLOYEE_ADDRESS';
IF(nCount > 0)
THEN
    dbms_output.put_line('TABLE EMPLOYEE_ADDRESS ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE EMPLOYEE_ADDRESS(
  ADDRESS_ID         NUMBER GENERATED BY DEFAULT AS IDENTITY,
  EMPLOYEE_ID        REFERENCES EMPLOYEE(EMPLOYEE_ID) ON DELETE CASCADE,
  ADDRESS_LINE_1     VARCHAR(255) NOT NULL,
  ADDRESS_LINE_2     VARCHAR(255) NOT NULL,
  ZIP_CODE           NUMBER NOT NULL, 
  CITY_ID            REFERENCES ADDRESS_CITY(CITY_ID) ON DELETE CASCADE,
  PRIMARY KEY(ADDRESS_ID))';
    EXECUTE IMMEDIATE 'INSERT INTO EMPLOYEE_ADDRESS(EMPLOYEE_ID,ADDRESS_LINE_1,ADDRESS_LINE_2,ZIP_CODE,CITY_ID) VALUES( (SELECT EMPLOYEE_ID FROM EMPLOYEE WHERE EMAIL =''EMAILJohn@GMAIL.com''), ''365 HEMENWAY ST'',''APT G7'',02117,(SELECT CITY_ID FROM ADDRESS_CITY WHERE CITY_NAME=''BOSTON''))';
    EXECUTE IMMEDIATE 'INSERT INTO EMPLOYEE_ADDRESS(EMPLOYEE_ID,ADDRESS_LINE_1,ADDRESS_LINE_2,ZIP_CODE,CITY_ID) VALUES( (SELECT EMPLOYEE_ID FROM EMPLOYEE WHERE EMAIL =''EMAILDavid@GMAIL.com''), ''265 HEMENWAY ST'',''APT F8'',02114,(SELECT CITY_ID FROM ADDRESS_CITY WHERE CITY_NAME=''BOSTON''))';
    EXECUTE IMMEDIATE 'INSERT INTO EMPLOYEE_ADDRESS(EMPLOYEE_ID,ADDRESS_LINE_1,ADDRESS_LINE_2,ZIP_CODE,CITY_ID) VALUES( (SELECT EMPLOYEE_ID FROM EMPLOYEE WHERE EMAIL =''EMAILRandy@GMAIL.com''), ''465 HEMENWAY ST'',''APT E2'',02123,(SELECT CITY_ID FROM ADDRESS_CITY WHERE CITY_NAME=''BOSTON''))';
    EXECUTE IMMEDIATE 'INSERT INTO EMPLOYEE_ADDRESS(EMPLOYEE_ID,ADDRESS_LINE_1,ADDRESS_LINE_2,ZIP_CODE,CITY_ID) VALUES( (SELECT EMPLOYEE_ID FROM EMPLOYEE WHERE EMAIL =''EMAILKendrick@GMAIL.com''), ''12 ROCKSTAR ST'',''APT B1'',02147,(SELECT CITY_ID FROM ADDRESS_CITY WHERE CITY_NAME=''BOSTON''))';
    EXECUTE IMMEDIATE 'INSERT INTO EMPLOYEE_ADDRESS(EMPLOYEE_ID,ADDRESS_LINE_1,ADDRESS_LINE_2,ZIP_CODE,CITY_ID) VALUES( (SELECT EMPLOYEE_ID FROM EMPLOYEE WHERE EMAIL =''EMAILGal@GMAIL.com''), ''24 BAYWATCH ST'',''APT M5'',02133,(SELECT CITY_ID FROM ADDRESS_CITY WHERE CITY_NAME=''BOSTON''))';
    EXECUTE IMMEDIATE 'INSERT INTO EMPLOYEE_ADDRESS(EMPLOYEE_ID,ADDRESS_LINE_1,ADDRESS_LINE_2,ZIP_CODE,CITY_ID) VALUES( (SELECT EMPLOYEE_ID FROM EMPLOYEE WHERE EMAIL =''EMAILEmily@GMAIL.COM''), ''58 MALIBU ST'',''APT K4'',02111,(SELECT CITY_ID FROM ADDRESS_CITY WHERE CITY_NAME=''BOSTON''))';
END IF;
SELECT count(*) into nCount FROM user_tables where table_name = 'ORDER_STATUS';
IF(nCount > 0)
THEN
    dbms_output.put_line('TABLE ORDER_STATUS ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE ORDER_STATUS(
  ORDER_ID          NUMBER GENERATED BY DEFAULT AS IDENTITY,
  STATUS_ID         REFERENCES CURRENT_STATUS(STATUS_ID) ON DELETE CASCADE,
  DEALS_ID          REFERENCES DEALS(DEALS_ID) ON DELETE CASCADE,
  EMPLOYEE_ID       REFERENCES EMPLOYEE(EMPLOYEE_ID) ON DELETE CASCADE,
  START_CONDITION   VARCHAR(255),
  END_CONDITION     VARCHAR(255),
  COMMENTS          VARCHAR(255),
  PRIMARY KEY(ORDER_ID))';
  COMMIT;
END IF;  

SELECT count(*) into nCount FROM DBA_ROLES where ROLE ='DB_CUSTOMERS';
IF(nCount > 0)
THEN
    dbms_output.put_line('ROLE DB_CUSTOMERS ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE'CREATE ROLE DB_CUSTOMERS';    
    EXECUTE IMMEDIATE'GRANT CREATE SESSION, CONNECT TO DB_CUSTOMERS';   
    EXECUTE IMMEDIATE'GRANT SELECT ON ADDRESS_COUNTRY TO DB_CUSTOMERS';
    EXECUTE IMMEDIATE'GRANT SELECT ON ADDRESS_STATE TO DB_CUSTOMERS';
    EXECUTE IMMEDIATE'GRANT SELECT ON ADDRESS_CITY TO DB_CUSTOMERS';
    EXECUTE IMMEDIATE'GRANT SELECT ON LISTINGS TO DB_CUSTOMERS';
    EXECUTE IMMEDIATE'GRANT SELECT ON LISTING_CATEGORY TO DB_CUSTOMERS';
    EXECUTE IMMEDIATE'GRANT SELECT ON RENTAL_BASIS TO DB_CUSTOMERS';
    EXECUTE IMMEDIATE'GRANT SELECT ON CURRENT_STATUS TO DB_CUSTOMERS';    
    EXECUTE IMMEDIATE'CREATE OR REPLACE PUBLIC SYNONYM ADDRESS_COUNTRY FOR project_admin.address_country';
    EXECUTE IMMEDIATE'CREATE OR REPLACE PUBLIC SYNONYM ADDRESS_CITY FOR project_admin.address_city';
    EXECUTE IMMEDIATE'CREATE OR REPLACE PUBLIC SYNONYM ADDRESS_STATE FOR project_admin.address_STATE';
    EXECUTE IMMEDIATE'CREATE OR REPLACE PUBLIC SYNONYM LISTINGS FOR project_admin.LISTINGS';
    EXECUTE IMMEDIATE'CREATE OR REPLACE PUBLIC SYNONYM LISTING_CATEGORY FOR project_admin.LISTING_CATEGORTY';
    EXECUTE IMMEDIATE'CREATE OR REPLACE PUBLIC SYNONYM RENTAL_BASIS FOR project_admin.RENTAL_BASIS';
    EXECUTE IMMEDIATE'CREATE OR REPLACE PUBLIC SYNONYM CURRENT_STATUS FOR project_admin.CURRENT_STATUS';
    COMMIT;
END IF;
SELECT count(*) into nCount FROM ALL_USERS where USERNAME ='NEW_CUSTOMER';
IF(nCount > 0)
THEN
    dbms_output.put_line('NEW_CUSTOMER USER ALREADY EXISTS');
ELSE
  EXECUTE IMMEDIATE'alter session set "_ORACLE_SCRIPT"=true';  
  EXECUTE IMMEDIATE'create user NEW_CUSTOMER identified by WELCOME';
  EXECUTE IMMEDIATE'GRANT CREATE SESSION,CONNECT TO NEW_CUSTOMER';
  
END IF;
EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line(dbms_utility.format_error_backtrace);
            dbms_output.put_line(SQLERRM);
            ROLLBACK;
            RAISE;
COMMIT;
END;
/

------------------------------------------------------------------------------------PROCEDURES----------------------------------------------------------------------------------------------

--HELP TO NEW_CUSTOMERS
CREATE OR REPLACE PROCEDURE HELP
AS
BEGIN
        dbms_output.put_line('START USING THIS APPLICATION BY SIGNING UP !');
        dbms_output.put_line('EXECUTE THE BELOW PROCEDURE WITH THE SPECIFIED PARAMETERS IN AN ANONYMOUS PL/SQL BLOCK AS FOLLOWS');
        dbms_output.put_line('SIGNUP(user_name,email,pass_word,first_name,last_name,phone_number)');
        dbms_output.put_line('AFTER LOGGING IN EXECUTE ALL_ACTIONS TO SEE THE LIST OF AVAILABLE ACTIONS');

EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line(SQLERRM);
        dbms_output.put_line(dbms_utility.format_error_backtrace);
        ROLLBACK;
END HELP;
/
GRANT EXECUTE ON HELP TO NEW_CUSTOMER;

--ALL ACTIONS OF REGISTERED CUSTOMERS
CREATE OR REPLACE PROCEDURE ALL_ACTIONS
AS
BEGIN
        dbms_output.put_line('HELLO '||SYS_CONTEXT( 'USERENV', 'SESSION_USER' )||' ! WELCOME TO OUR RENTAL MARKET!');
        
        dbms_output.put_line('AVAILABLE ACTIONS:');
        dbms_output.put_line('------------- PERSONAL INFORMATION -------------');
        dbms_output.put_line('1. VIEW YOUR INFORMATION USING SELECT * FROM PEOPLE_<YOUR_USER_NAME>');
        dbms_output.put_line('');
        
        dbms_output.put_line('------------- ADDRESS RELATED ACTIONS -----------');
    
        dbms_output.put_line('1. REFER TO OUR SERVICE LOCATIONS USING SELECT * FROM AVAILABLE_LOCAITONS');
        dbms_output.put_line('2. REFER TO OUR SERVICE LOCATIONS BY STATE USING SELECT * FROM ADDRESS_STATE');
        dbms_output.put_line('3. REFER TO OUR SERVICE LOCATIONS BY CITY USING SELECT * FROM ADDRESS_CITY');
        dbms_output.put_line('4. VIEW YOUR ADDRESS BOOK USING SELECT * FROM ADDRESS_<YOUR_USER_NAME>');
        dbms_output.put_line('5. ADD A NEW ADDRESS TO YOUR ADDRESS_BOOK USING ADD_ADDRESS(ADDRESSLINE 1 varchar, ADDRESSLINE 2 varchar,ZIPCODE number, CITY varchar) ');
        dbms_output.put_line('6. DELETE AN ADDRESS FROM YOUR ADDRESS_BOOK USING REMOVE_ADDRESS(MY_ADDRESS_ID number) ');
        dbms_output.put_line('');
        
        dbms_output.put_line('-------------LISTING RELATED ACTIONS-------------');
        dbms_output.put_line('1. VIEW THE RENTAL BASIS THAT OUR SERVICE SUPPORTS USING SELECT * FROM RENTAL_BASIS ');
        dbms_output.put_line('2. VIEW THE CATEGORIES IN WHICH WE OFFER RENTAL SERVICES USING SELECT * FROM LISTING_CATEGORY');
        dbms_output.put_line('3. ADD A NEW LISTING USING ADD_NEW_LISTING(LISTING_TITLE varchar,LISTING_DESCRIPTION varchar,LISTING_PRICE varchar,CONTACT_INFO varchar,RENT_BASIS varchar,ITEM_CATEGORY varchar,MY_ADDRESS_ID number,START_TIME timestamp,END_TIME timestamp)');
        dbms_output.put_line('4. REMOVE A LISTING USING REMOVE_LISTING(MY_LISTING_ID number) ');
        dbms_output.put_line('');
        
        dbms_output.put_line('-------------DEALS RELATED ACTIONS-------------');
        dbms_output.put_line('1. ');
        dbms_output.put_line('2. VIEW THE CATEGORIES IN WHICH WE OFFER RENTAL SERVICES USING SELECT * FROM LISTING_CATEGORY');
        dbms_output.put_line('3. ADD A NEW LISTING USING ADD_NEW_LISTING(LISTING_TITLE varchar,LISTING_DESCRIPTION varchar,LISTING_PRICE varchar,CONTACT_INFO varchar,RENT_BASIS varchar,ITEM_CATEGORY varchar,MY_ADDRESS_ID number,START_TIME timestamp,END_TIME timestamp)');
        dbms_output.put_line('4. REMOVE A LISTING USING REMOVE_LISTING(MY_LISTING_ID number) ');
        dbms_output.put_line('');
        
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line(SQLERRM);
        dbms_output.put_line(dbms_utility.format_error_backtrace);
        ROLLBACK;
END ALL_ACTIONS;

/

CREATE OR REPLACE PROCEDURE signup(user_name varchar,email varchar,pass_word varchar,first_name varchar,last_name varchar,phone_number number)
IS 
uid NUMBER;
sqlstmt varchar(1000 char);
nCount NUMBER;
BEGIN
SELECT count(*) into nCount FROM all_users where username = UPPER(user_name);
IF(nCount > 0)
THEN
  dbms_output.put_line('User already exists');
ELSE
  EXECUTE IMMEDIATE'alter session set "_ORACLE_SCRIPT"=true';  
  INSERT INTO PEOPLE(USERNAME, EMAIL,PASS_WORD, FIRST_NAME, LAST_NAME, PHONE_NUMBER) VALUES(UPPER(user_name),UPPER(email),pass_word,UPPER(first_name),UPPER(last_name),phone_number);
  EXECUTE IMMEDIATE'CREATE USER '||user_name||' IDENTIFIED BY '||pass_word;
  EXECUTE IMMEDIATE'GRANT DB_CUSTOMERS TO '||user_name;
  COMMIT;
  SELECT USER_ID INTO uid FROM PEOPLE WHERE USERNAME=UPPER(user_name);
  dbms_output.put_line(uid);
  
  --CREATE ADDRESS_VIEW
  sqlstmt :='CREATE OR REPLACE VIEW ADDRESS_'||user_name||' AS SELECT
    user_address.address_id,
    people.username,
    user_address.address_line_1,
    user_address.address_line_2,
    zip_code,
    address_city.city_name,
    address_state.state_name,
    address_country.country_name
FROM
    user_address
INNER JOIN address_city
        USING(city_id)
INNER JOIN address_state
        USING(state_id)
INNER JOIN address_country
        USING(country_id)
INNER JOIN people
        USING(user_id) where user_id='||uid;
        
  EXECUTE IMMEDIATE sqlstmt;
  dbms_output.put_line('address view created');
  EXECUTE IMMEDIATE 'CREATE OR REPLACE PUBLIC SYNONYM ADDRESS_'||user_name||' FOR project_admin.ADDRESS_'||user_name;
  dbms_output.put_line('SYNONYM CREATED FOR ADDRESS');
  EXECUTE IMMEDIATE 'GRANT SELECT ON ADDRESS_'||user_name||' TO '||user_name;
  dbms_output.put_line('address view granted');
  

--CREATE DEALS VIEW
    sqlstmt := 'CREATE OR REPLACE VIEW DEALS_REQUEST_BY_'||user_name||' AS SELECT
    deals.deals_id,
    TRunc(CREATE_TIME) Date_Requested,
    p1.username deal_owner,
    listings.title Listing_title,
    l_description Listing_Description,
    p2.username Listing_Owner,
    DEALS.PRICE Counter_Offer_Price,
    to_char(DEALS.START_DATE,'' DD/MON - HH24:MI'') Counter_Offer_Start_Date,
    to_char(DEALS.END_DATE,'' DD/MON - HH24:MI'') Counter_Offer_End_Date,
    deal_status.status_name Deal_Status
FROM
    DEALS
INNER JOIN people p1 ON p1.user_id=deals.user_id and deals.user_id='||uid||'
 INNER JOIN DEAL_STATUS
        USING(STATUS_ID)
INNER JOIN LISTINGS
        USING(LISTING_ID)
INNER JOIN people p2 ON p2.user_id=LISTINGS.user_id';
  EXECUTE IMMEDIATE sqlstmt;
   dbms_output.put_line('deals view created');
  EXECUTE IMMEDIATE 'CREATE OR REPLACE PUBLIC SYNONYM DEALS_REQUEST_BY_'||user_name||' FOR project_admin.DEALS_REQUEST_BY_'||user_name;
   dbms_output.put_line('deals SYNONYM created');
  EXECUTE IMMEDIATE 'GRANT SELECT ON DEALS_REQUEST_BY_'||user_name||' TO '||user_name;
  dbms_output.put_line('DEALS view granted');
  

--CREATE DEALS_INBOX_ VIEW
    sqlstmt := 'CREATE OR REPLACE VIEW DEALS_INBOX_'||user_name||' AS SELECT
    deals.deals_id,
    TRunc(CREATE_TIME) Date_Requested,
    p1.username,
    listings.title Listing_title,
    l_description Listing_Description,
    DEALS.PRICE Counter_Offer_Price,
    to_char(DEALS.START_DATE,'' DD/MON - HH24:MI'') Counter_Offer_Start_Date,
    to_char(DEALS.END_DATE,'' DD/MON - HH24:MI'') Counter_Offer_End_Date,
    deal_status.status_name Deal_Status
FROM
    DEALS
INNER JOIN people p1 ON p1.user_id=deals.user_id
 INNER JOIN DEAL_STATUS
        USING(STATUS_ID)
INNER JOIN LISTINGS
        USING(LISTING_ID) WHERE LISTINGS.user_id='||uid;
  EXECUTE IMMEDIATE sqlstmt;
   dbms_output.put_line('DEALS_INBOX_ view created');
  EXECUTE IMMEDIATE 'CREATE OR REPLACE PUBLIC SYNONYM DEALS_INBOX_'||user_name||' FOR project_admin.DEALS_INBOX_'||user_name;
   dbms_output.put_line('DEALS_INBOX_ SYNONYM created');
  EXECUTE IMMEDIATE 'GRANT SELECT ON DEALS_INBOX_'||user_name||' TO '||user_name;
  dbms_output.put_line('DEALS_INBOX_ view granted');

--CREATE ORDER VIEW
  sqlstmt :='CREATE OR REPLACE VIEW ORDERS_'||user_name||' AS SELECT
    ORDER_STATUS.ORDER_ID Order_ID,
    LISTINGS.TITLE Listing_Title,
    P2.USERNAME Listing_Owner,
    P1.USERNAME Deal_Owner,
    START_CONDITION,
    END_CONDITION,
    CURRENT_STATUS.STATUS Order_Status,
    COMMENTS
    FROM
        ORDER_STATUS
    INNER JOIN CURRENT_STATUS
            USING(STATUS_ID)
    INNER JOIN DEALS
            USING(DEALS_ID)
    INNER JOIN PEOPLE P1 ON P1.USER_ID=DEALS.USER_ID
    INNER JOIN LISTINGS ON LISTINGS.LISTING_ID=DEALS.LISTING_ID
    INNER JOIN PEOPLE P2 ON P2.USER_ID=LISTINGS.USER_ID
    WHERE DEALS.USER_ID='||uid||' OR LISTINGS.USER_ID='||uid||'';
  EXECUTE IMMEDIATE sqlstmt;
  dbms_output.put_line('ORDERS_ view created');
  EXECUTE IMMEDIATE 'CREATE OR REPLACE PUBLIC SYNONYM ORDERS_'||user_name||' FOR project_admin.ORDERS_'||user_name;
  dbms_output.put_line('SYNONYM CREATED FOR ORDERS_');
  EXECUTE IMMEDIATE 'GRANT SELECT ON ORDERS_'||user_name||' TO '||user_name;
  dbms_output.put_line('ORDERS_ view granted');


--CREATE PEOPLE VIEW
  EXECUTE IMMEDIATE'CREATE OR REPLACE VIEW PEOPLE_'||user_name||' AS SELECT * FROM PEOPLE WHERE USER_ID='||uid;
   dbms_output.put_line('people view created');
  EXECUTE IMMEDIATE 'CREATE OR REPLACE PUBLIC SYNONYM PEOPLE_'||user_name||' FOR project_admin.PEOPLE_'||user_name;
   dbms_output.put_line('PEOPLE SYNONYM created');
  EXECUTE IMMEDIATE 'GRANT SELECT ON PEOPLE_'||user_name||' TO '||user_name;
   dbms_output.put_line('people view granted');
     
--GIVE ACCESS TO ALL ACTIONS
  EXECUTE IMMEDIATE 'GRANT EXECUTE ON ALL_ACTIONS TO '||user_name;
  dbms_output.put_line('all actions granted');


  COMMIT;
END IF;
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line(SQLERRM);
        dbms_output.put_line(dbms_utility.format_error_backtrace);
        ROLLBACK;
END SIGNUP;

/

GRANT EXECUTE ON HELP TO NEW_CUSTOMER;
GRANT EXECUTE ON SIGNUP TO NEW_CUSTOMER;

------------------------------------------------------------------------------------PACKAGES-----------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON;

CREATE OR REPLACE PACKAGE ADDRESS_BOOK
AS
PROCEDURE ADD_NEW(ADDRESSLINE_1 varchar,ADDRESSLINE_2 varchar,ZIPCODE number,CITY varchar);
PROCEDURE DELETE_EXISTING(MY_ADDRESS_ID NUMBER);
END ADDRESS_BOOK;
/
CREATE OR REPLACE PACKAGE BODY ADDRESS_BOOK
AS
PROCEDURE ADD_NEW(ADDRESSLINE_1 varchar,ADDRESSLINE_2 varchar,ZIPCODE number,CITY varchar)
AS
UID number;
CID number;
BEGIN
dbms_output.put_line(USER);
select user_id into UID from people where username=USER;
dbms_output.put_line(UID);
select city_id into CID from ADDRESS_CITY where CITY_NAME=UPPER(CITY);
dbms_output.put_line(CID);
INSERT INTO USER_ADDRESS(USER_ID,ADDRESS_LINE_1,ADDRESS_LINE_2,ZIP_CODE,CITY_ID) VALUES(UID,ADDRESSLINE_1,ADDRESSLINE_2,ZIPCODE,CID);
COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line(SQLERRM);
        dbms_output.put_line('Please provide the correct values according to the signature given in ALL_ACTIONS..Ensure the available locations from SELECT * FROM AVAILABLE_LOCATIONS');
        rollback;
        raise;
END ADD_NEW;

PROCEDURE DELETE_EXISTING(MY_ADDRESS_ID NUMBER)
AS
UID number;
AID number;
BEGIN
dbms_output.put_line(USER);
select user_id into UID from people where username=USER;
dbms_output.put_line(UID);
select ADDRESS_ID into AID from USER_ADDRESS where ADDRESS_ID=MY_ADDRESS_ID AND USER_ID=UID;
dbms_output.put_line(AID);
DELETE FROM USER_ADDRESS WHERE ADDRESS_ID=AID;
COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line(SQLERRM);
        dbms_output.put_line('Please provide the correct values according to the signature given in ALL_ACTIONS..Ensure that the address ID blongs to you');
        rollback;
        raise;
END DELETE_EXISTING;

END ADDRESS_BOOK;
/

GRANT EXECUTE ON ADDRESS_BOOK TO DB_CUSTOMERS;
CREATE OR REPLACE PUBLIC SYNONYM ADDRESS_BOOK FOR PROJECT_ADMIN.ADDRESS_BOOK;

/

CREATE OR REPLACE PACKAGE LISTING
AS
PROCEDURE ADD_NEW(LISTING_TITLE varchar,LISTING_DESCRIPTION varchar,LISTING_PRICE varchar,CONTACT_INFO varchar,RENT_BASIS varchar,ITEM_CATEGORY varchar,MY_ADDRESS_ID number,START_TIME timestamp,END_TIME timestamp);
PROCEDURE DELETE_MINE(MY_LISTING_ID NUMBER);
END LISTING;
/
CREATE OR REPLACE PACKAGE BODY LISTING
AS
PROCEDURE ADD_NEW(LISTING_TITLE varchar,LISTING_DESCRIPTION varchar,LISTING_PRICE varchar,CONTACT_INFO varchar,RENT_BASIS varchar,ITEM_CATEGORY varchar,MY_ADDRESS_ID number,START_TIME timestamp,END_TIME timestamp)
AS
UID number;
AID number;
RID number;
CID number;
BEGIN
dbms_output.put_line(USER);
select user_id into UID from people where username=USER;
dbms_output.put_line(UID);
select ADDRESS_ID into AID from USER_ADDRESS where ADDRESS_ID=MY_ADDRESS_ID AND USER_ID=UID;
dbms_output.put_line(AID);
select BASIS_ID into RID from RENTAL_BASIS where BASIS_NAME=UPPER(RENT_BASIS);
dbms_output.put_line(RID);
select CATEGORY_ID into CID from LISTING_CATEGORY where CATEGORY_NAME=UPPER(ITEM_CATEGORY);
dbms_output.put_line(CID);

INSERT INTO LISTINGS(TITLE,L_DESCRIPTION,CONTACT_DETAILS,PRICE,RENTAL_BASIS_ID,CATEGORY_ID,USER_ID,ADDRESS_ID,START_DATE,END_DATE)
VALUES(LISTING_TITLE,LISTING_DESCRIPTION,CONTACT_INFO,LISTING_PRICE,RID,CID,UID,AID,START_TIME,END_TIME);
COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line(SQLERRM);
        dbms_output.put_line('Please provide the correct values according to the signature given in ALL_ACTIONS..Ensure that the address ID blongs to you');
        rollback;
        raise;
END ADD_NEW;
PROCEDURE DELETE_MINE(MY_LISTING_ID NUMBER)
AS
UID number;
LID number;
BEGIN
dbms_output.put_line(USER);
select user_id into UID from people where username=USER;
dbms_output.put_line(UID);
select LISTING_ID into LID from LISTINGS where USER_ID=UID AND LISTING_ID=MY_LISTING_ID;
DELETE FROM LISTINGS WHERE LISTING_ID=LID AND USER_ID=UID;
COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line(SQLERRM);
        dbms_output.put_line('Please provide the correct values according to the signature given in ALL_ACTIONS..Ensure that the listing ID blongs to you');
        rollback;
        raise;
END DELETE_MINE;
END LISTING;
/

GRANT EXECUTE ON LISTING TO DB_CUSTOMERS;
CREATE OR REPLACE PUBLIC SYNONYM LISTING FOR PROJECT_ADMIN.LISTING;

/

CREATE OR REPLACE PACKAGE DEAL
AS
PROCEDURE REQUEST(INPUT_LISTING_ID NUMBER,DEAL_PRICE number,START_TIME timestamp,END_TIME timestamp);
PROCEDURE ACCEPT_DEAL(INPUT_DEAL_ID NUMBER);
END DEAL;
/
CREATE OR REPLACE PACKAGE BODY DEAL
AS
PROCEDURE REQUEST(INPUT_LISTING_ID NUMBER,DEAL_PRICE number,START_TIME timestamp,END_TIME timestamp)
AS
UID number;
LID number;
BEGIN
dbms_output.put_line(USER);
select user_id into UID from people where username=USER;
dbms_output.put_line(UID);
INSERT INTO DEALS(USER_ID,LISTING_ID,PRICE,STATUS_ID,START_DATE,END_DATE) VALUES(UID,INPUT_LISTING_ID,DEAL_PRICE,1,START_TIME,END_TIME);
COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line(SQLERRM);
        dbms_output.put_line('Please provide the correct values according to the signature given in ALL_ACTIONS..Ensure that the listing ID is valid');
        rollback;
        raise;
END REQUEST;
PROCEDURE ACCEPT_DEAL(INPUT_DEAL_ID NUMBER)
AS
UID number;
DID number;
LID number;
BEGIN
dbms_output.put_line(USER);
select user_id into UID from people where username=USER;
dbms_output.put_line(UID);
select deals_id into DID from deals where deals_id = INPUT_DEAL_ID AND LISTING_ID IN (SELECT LISTING_ID FROM LISTINGS WHERE USER_ID = UID);
dbms_output.put_line(DID);
SELECT LISTING_ID INTO LID FROM DEALS WHERE DEALS_ID=DID;
dbms_output.put_line(LID);

UPDATE DEALS SET STATUS_ID=2 WHERE DEALS_ID=DID;
UPDATE DEALS SET STATUS_ID=3  WHERE STATUS_ID=1 AND LISTING_ID=LID;
DELETE FROM LISTINGS WHERE LISTING_ID=LID;
COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line(SQLERRM);
        dbms_output.put_line('Please provide the correct values according to the signature given in ALL_ACTIONS..Ensure that the address ID blongs to you');
        rollback;
        raise;
END ACCEPT_DEAL;
END DEAL;
/

GRANT EXECUTE ON DEAL TO DB_CUSTOMERS;
CREATE OR REPLACE PUBLIC SYNONYM DEAL FOR PROJECT_ADMIN.DEAL;
------------------------------------------------------------------------------------------TRIGGERS------------------------------------------------------------------------------------------

CREATE OR REPLACE TRIGGER Order_Creation_trg
    AFTER
    UPDATE
    ON DEALS
    FOR EACH ROW
BEGIN
   IF (:OLD.STATUS_ID = 1 AND :NEW.STATUS_ID = 2) THEN
   INSERT INTO ORDER_STATUS(STATUS_ID,DEALS_ID) VALUES(1,:NEW.DEALS_ID);
   END IF;
END;
/
-----------------------------------------------------------------------------------------------PUBLIC VIEWS---------------------------------------------------------------------------
CREATE OR REPLACE VIEW AVAILABLE_LOCATIONS AS SELECT
    aci.city_id,
    city_name,
    address_state.state_id,
    address_state.state_name,
    address_country.country_id,
    address_country.country_name
FROM
    address_city aci
INNER JOIN address_state
        on aci.state_id=address_state.state_id
INNER JOIN address_country
        on address_country.country_id=address_state.country_id;
/

GRANT SELECT ON AVAILABLE_LOCATIONS TO DB_CUSTOMERS;
/
CREATE OR REPLACE PUBLIC SYNONYM AVAILABLE_LOCATIONS FOR PROECT_ADMIN.AVAILABLE_LOCATIONS;
